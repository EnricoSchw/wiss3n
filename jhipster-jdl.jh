entity Grade {
	date LocalDate required
    value Integer min(1) max(6) required
    additional GradeAdditional
    point Integer min(1) max(15)
}

enum GradeAdditional {
	PLUS,
    MINUS
}
entity Task {
    titel String required minlength(2)
    content TextBlob
    type TaskType required
    start LocalDate required
	end LocalDate required
}

// Domain Schule
entity SchoolClass {
    start LocalDate required
    end LocalDate required
    name String required minlength(2)
}

// Fach
entity TeachingSubject {
	year LocalDate required
	name String required minlength(2)
    grade Integer min(1) max(6) required
}

// Thema == Tag
entity Tag {
	name String required minlength(2)
}
// Domain Inhalt
entity Content {
	titel String required minlength(2)
    text TextBlob
}

enum TaskType {
    HAUSAUFGABE,
    VORTRAG, 
    KURZKONTROLLE, 
    TEST, 
    KLASSENARBEIT,
    KLAUSUR,
    MUENDLICH
}

// User releations shool
relationship ManyToOne {
	SchoolClass{user(login) required} to User
    Grade{user(login) required} to User
    Task{user(login) required} to User
    Content{user(login) required} to User
    TeachingSubject{user(login) required} to User
}

# Task relations
relationship OneToOne {
	 Grade {task required} to Task
}

relationship ManyToOne {
    Task{teachingSubject required} to TeachingSubject
	Content{task} to Task
}

# School and Subject
relationship OneToMany {
	SchoolClass{teachingSubjects} to TeachingSubject{schoolClass}
}

# Tag relations:
relationship ManyToMany {
    Content{tags} to Tag
    TeachingSubject{tag} to Tag
}


paginate Content, Tag with infinite-scroll
// Set pagination options
paginate SchoolClass, TeachingSubject with pagination

dto * with mapstruct

// Set service options to all except few
service all with serviceImpl
// Set an angular suffix
angularSuffix * with classApp
